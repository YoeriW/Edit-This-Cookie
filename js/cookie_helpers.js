const buildUrl = (domain, path, searchUrl) => {
    const secure = searchUrl.startsWith("https://");

    if (domain.startsWith('.'))
        domain = domain.substring(1);

    return `http${secure ? "s" : ""}://${domain}${path}`;
};

const deleteAll = (cookieList, searchUrl) => {
    cookieList.forEach(curr => {
        const url = buildUrl(curr.domain, curr.path, searchUrl);
        deleteCookie(url, curr.name, curr.storeId);
    });
};

const deleteCookie = (url, name, store, callback) => {
    chrome.cookies.remove({
        url,
        name,
        storeId: store
    }, details => {
        if (typeof callback === "undefined")
            return;
        callback(details !== null && details !== undefined && details !== "undefined");
    });
};

class Filter {
    constructor() {
        this.filter = {};
    }

    setUrl(url) {
        this.filter.url = url;
    }

    setDomain(domain) {
        this.filter.domain = domain;
    }

    setName(name) {
        this.filter.name = name;
    }

    setSecure(secure) {
        this.filter.secure = secure;
    }

    setSession(session) {
        this.filter.session = session;
    }

    getFilter() {
        return this.filter;
    }
}

const cookieForCreationFromFullCookie = (fullCookie) => {
    fullCookie.domain = fullCookie.domain.replace(/^\./, "");

    const url = `http${fullCookie.secure ? "s" : ""}://${fullCookie.domain}${fullCookie.path}`;

    const newCookie = {
        url,
        name: fullCookie.name || '',
        value: fullCookie.value || '',
        domain: fullCookie.domain || '',
        path: fullCookie.path || '',
        secure: fullCookie.secure || false,
        httpOnly: fullCookie.httpOnly || false,
        expirationDate: fullCookie.expirationDate || null,
        storeId: fullCookie.storeId || null,
        sameSite: fullCookie.sameSite || null,
    };

    if (fullCookie.hostOnly)
        newCookie.domain = null;

    if (fullCookie.session)
        newCookie.expirationDate = null;

    if (fullCookie.sameSite === 'unspecified') {
        newCookie.sameSite = null;
    }
    return newCookie;
};

const compareCookies = (b, a) => {
    try {
        if (b.name !== a.name || b.value !== a.value || b.path !== a.path || b.secure !== a.secure || b.httpOnly !== a.httpOnly)
            return false;

        const aHostOnly = !!(a.hostOnly || a.domain === undefined);
        const bHostOnly = !!(b.hostOnly || b.domain === undefined);
        if (aHostOnly !== bHostOnly || (!aHostOnly && b.domain !== a.domain))
            return false;

        const aSession = !!(a.session || a.expirationDate === undefined);
        const bSession = !!(b.session || b.expirationDate === undefined);
        if (aSession !== bSession || (aSession === false && b.expirationDate !== a.expirationDate))
            return false;
    } catch (e) {
        console.error(e.message);
        return false;
    }
    return true;
};

const cookiesToString = {
    get(cookies, url) {
        if (cookiesToString[preferences.copyCookiesType] !== undefined && cookies.length > 0)
            return cookiesToString[preferences.copyCookiesType](cookies, url);
        else
            return undefined;
    },

    netscape(cookies, url) {
        let string = "";
        string += "# Netscape HTTP Cookie File\n";
        string += "# https://curl.haxx.se/rfc/cookie_spec.html\n";
        string += "# This file was generated by EditThisCookie\n";
        if (url !== undefined)
            string += `# URL: ${url}\n`;
        cookies.forEach((cookie, i) => {
            string += `${cookie.domain}\t${(!cookie.hostOnly).toString().toUpperCase()}\t${cookie.path}\t${cookie.secure.toString().toUpperCase()}\t${cookie.expirationDate ? Math.round(cookie.expirationDate) : "0"}\t${cookie.name}\t${cookie.value}${i === cookies.length - 1 ? "" : "\n"}`;
        });
        return string;
    },

    json(cookies) {
        return JSON.stringify(cookies.map((cookie, i) => ({ ...cookie, id: i + 1 })), null, 4);
    },

    semicolonPairs(cookies, url) {
        let string = "";
        string += "// Semicolon separated Cookie File\n";
        string += "// This file was generated by EditThisCookie\n";
        string += "// Details: https://www.ietf.org/rfc/rfc2109.txt\n";
        string += "// Example: https://www.tutorialspoint.com/javascript/javascript_cookies.htm\n";
        if (url !== undefined)
            string += `// URL: ${url}\n`;
        cookies.forEach(cookie => {
            string += `${cookie.name}=${cookie.value};`;
        });
        return string;
    },

    map(cookies) {
        return cookies.map(cookie => `"${cookie.name}","${cookie.value}"`).join("\n");
    },

    lpw(cookies, url) {
        let string = "";
        string += "// Semicolon separated Cookie File\n";
        string += "// This file was generated by EditThisCookie\n";
        string += "// Details: https://www.cookiecentral.com/faq/#3.5\n";
        string += "// Example: https://www.tutorialspoint.com/javascript/javascript_cookies.htm\n";
        if (url !== undefined)
            string += `// URL: ${url}\n`;
        cookies.forEach(cookie => {
            string += `Set-Cookie3: ${cookie.name}=${cookie.value}; path="/"; domain=${cookie.domain}; path_spec; expires="${cookie.expirationDate ? cookie.expirationDate : "0"}"; version=0\n`;
        });
        return string;
    }
};

const getCurrentTabCookieUrl = () => {
    const url = $('input', '#cookieSearchCondition').val();
    const protocol = url.match(/^http(s?):\/\//)[0] || '';
    const target = url.slice(protocol.length, protocol.length + url.replace(protocol, '').indexOf('/'));
    return `${protocol}${target}`;
};